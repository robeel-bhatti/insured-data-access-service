[project]
name = "party-service"
version = "0.1.0"
description = "CRUD Microservice for Party data."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "flask>=3.1.2",
    "sqlalchemy>=2.0.43",
    "python-dotenv>=1.1.1",
    "flask-caching>=2.3.1",
    "redis>=6.4.0",
    "alembic>=1.17.0",
    "psycopg2-binary>=2.9.11",
]

[dependency-groups]
dev = [
    "commitizen>=4.9.1",
    "mypy>=1.18.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-mock>=3.15.1",
    "ruff>=0.13.2",
]

[tool.pytest.ini_options]
testpaths = [
    "tests/integration",
    "tests/unit"
]
addopts = [
    "--import-mode=importlib"
]

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/alembic"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#

[post_write_hooks]
hooks = "pre_commit"
pre_commit.type = "console_scripts"
pre_commit.entrypoint = "pre-commit"
pre_commit.options = "run --files REVISION_SCRIPT_FILENAME"
